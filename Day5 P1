Missing and Repeating number:

Method 1: tc=0(2n),sc=0(n)
pair<int,int> missingAndRepeating(vector<int> &arr, int n)
{
	// Write your code here 
	vector<int> v(n,0);
	int m,r;
	for(int i=0;i<arr.size();i++)
	{
		v[arr[i]-1]++;
	}
	for(int i=0;i<n;i++)
	{
		if(v[i]==0)
		{
			m=i+1;
		}
		else if(v[i]==2)
		{
			r=i+1;
		}
	}
	return {m,r};
}


Method 2: tc=0(n),sc=0(1)
pair<int,int> missingAndRepeating(vector<int> &arr, int n)
{
	long long SN=(n*(n+1))/2;
	long long S2N=(n*(n+1)*(2*n+1))/6;
	long long S=0,S2=0;
	for(int i=0;i<arr.size();i++)
	{
		S+=arr[i];
		S2+=(long long)arr[i]*(long long)arr[i];
	}
	long long val1=S-SN;
	long long val2=S2-S2N;
	val2=val2/val1;
	long long x=(val1+val2)/2;
	long long y=x-val1;
	return {(int)y,(int)x};
}


Method 3:
#include <bits/stdc++.h>
pair<int,int> missingAndRepeating(vector<int> &arr, int n)
{
	// Write your code here 
	int xr=0;
	for(int i=0;i<arr.size();i++)
	{
		xr=xr^arr[i];
		xr=xr^(i+1);
	}
	int bitno=0;
	while(1)
	{
		if((xr&(1<<bitno))!=0)
		{
			break;
		}
		bitno++;
	}
	int zero=0;
	int one=0;
	for(int i=0;i<arr.size();i++)
	{
		if((arr[i]&(1<<bitno))!=0)
		{
			one=one^arr[i];
		}
		else
		{
			zero=zero^arr[i];
		}
	}
	for(int i=1;i<=n;i++)
	{
		if((i&(1<<bitno))!=0)
		{
			one=one^i;
		}
		else
		{
			zero=zero^i;
		}
	}
	int cnt=0;
	for(int i=0;i<arr.size();i++)
	{
		if(arr[i]==zero) cnt++;
	}
	if(cnt==2) return {one,zero};
	else return {zero,one};
}

