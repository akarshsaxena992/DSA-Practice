Majority element 2:


Mehtod 1: tc=O(n),sc=O(n)
vector<int> majorityElement(vector<int>& nums) {
        vector<int> v;
        int n=nums.size();
        map<int,int> m;
        for(int i=0;i<n;i++)
        {
            m[nums[i]]++;
        }
        for(auto x:m)
        {
            if(x.second>n/3)
            {
                v.push_back(x.first);
            }
        }
        return v;
    }
    
    
    
    Mehtod 2: tc=O(n),sc=O(1)
    vector<int> majorityElement(vector<int>& nums) {
        int c1=0,c2=0;
        int el1=INT_MIN;
        int el2=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            if(c1==0 && el2!=nums[i])
            {
                el1=nums[i];
                c1++;
            }
            else if(c2==0 && el1!=nums[i])
            {
                el2=nums[i];
                c2++;
            }
            else if(nums[i]==el1) c1++;
            else if(nums[i]==el2) c2++;
            else
            {
                c1--;
                c2--;
            }
        }
        vector<int> ans;
        c1=0,c2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==el1) c1++;
            if(nums[i]==el2) c2++;
        }
        int mini=(int)(nums.size()/3)+1;
        if(c1>=mini) ans.push_back(el1);
        if(c2>=mini) ans.push_back(el2);
        sort(ans.begin(),ans.end());
        return ans;
    }
